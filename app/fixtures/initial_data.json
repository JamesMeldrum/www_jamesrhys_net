[{"pk": 10, "model": "contenttypes.contenttype", "fields": {"model": "blogpost", "name": "blog post", "app_label": "api"}}, {"pk": 4, "model": "contenttypes.contenttype", "fields": {"model": "contenttype", "name": "content type", "app_label": "contenttypes"}}, {"pk": 11, "model": "contenttypes.contenttype", "fields": {"model": "experiment", "name": "experiment", "app_label": "api"}}, {"pk": 2, "model": "contenttypes.contenttype", "fields": {"model": "group", "name": "group", "app_label": "auth"}}, {"pk": 8, "model": "contenttypes.contenttype", "fields": {"model": "images", "name": "images", "app_label": "api"}}, {"pk": 14, "model": "contenttypes.contenttype", "fields": {"model": "logentry", "name": "log entry", "app_label": "admin"}}, {"pk": 1, "model": "contenttypes.contenttype", "fields": {"model": "permission", "name": "permission", "app_label": "auth"}}, {"pk": 5, "model": "contenttypes.contenttype", "fields": {"model": "session", "name": "session", "app_label": "sessions"}}, {"pk": 6, "model": "contenttypes.contenttype", "fields": {"model": "site", "name": "site", "app_label": "sites"}}, {"pk": 7, "model": "contenttypes.contenttype", "fields": {"model": "sitemetadata", "name": "site meta data", "app_label": "app"}}, {"pk": 9, "model": "contenttypes.contenttype", "fields": {"model": "tag", "name": "tag", "app_label": "api"}}, {"pk": 13, "model": "contenttypes.contenttype", "fields": {"model": "talks", "name": "talks", "app_label": "api"}}, {"pk": 3, "model": "contenttypes.contenttype", "fields": {"model": "user", "name": "user", "app_label": "auth"}}, {"pk": "9a8b9972c0ad158edd1f4d8796197890", "model": "sessions.session", "fields": {"expire_date": "2013-01-02T22:41:35Z", "session_data": "NTIxY2U1MzVlZjc3ZTRlOWY3YjE3MTgwNmYxOWE0ZTUwMGU3YzZmMjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQSKAQF1Lg==\n"}}, {"pk": 1, "model": "sites.site", "fields": {"domain": "example.com", "name": "example.com"}}, {"pk": 1, "model": "api.images", "fields": {"caption": "buckyball", "image": "uploads/Buckyball_Nested-1024x781.jpg", "object_id": 1, "content_type": 12, "title": "buckyball"}}, {"pk": 2, "model": "api.images", "fields": {"caption": "x", "image": "uploads/13982460-candy-corn-seamless-texture-tile.jpg", "object_id": 1, "content_type": 12, "title": "x"}}, {"pk": 3, "model": "api.images", "fields": {"caption": "1", "image": "uploads/Buckyball_Nested-1024x781_1.jpg", "object_id": 1, "content_type": 12, "title": "1"}}, {"pk": 1, "model": "api.tag", "fields": {"title": "Test"}}, {"pk": 2, "model": "api.tag", "fields": {"title": "Meta"}}, {"pk": 3, "model": "api.tag", "fields": {"title": "svn"}}, {"pk": 4, "model": "api.tag", "fields": {"title": "tmux"}}, {"pk": 5, "model": "api.tag", "fields": {"title": "RabbitMQ"}}, {"pk": 6, "model": "api.tag", "fields": {"title": "python"}}, {"pk": 7, "model": "api.tag", "fields": {"title": "google"}}, {"pk": 8, "model": "api.tag", "fields": {"title": "as3"}}, {"pk": 9, "model": "api.tag", "fields": {"title": "rhel"}}, {"pk": 10, "model": "api.tag", "fields": {"title": "backbone"}}, {"pk": 11, "model": "api.tag", "fields": {"title": "backbone.js"}}, {"pk": 12, "model": "api.tag", "fields": {"title": "django"}}, {"pk": 2, "model": "api.blogpost", "fields": {"body": "I've finally gotten around to booting my site again. For the past couple of years I've run posts off blogger.com - mainly because I didn't want the overhead of managing my own syntax parsing and comment moderation. But since that muscle's atrophied, I've yearned to have my own blog back. Blog posts are now fetched via cached JSON and are all SEO-optimized with compliant OG headers. Booyah. \r\n\r\n<pre><code class=\"html\">\r\n&lt;div&gt;test&lt;/div>\r\n</code></pre>\r\nThat said, I still need to handle the syntax parsing and I need to boot the discqus server. We'll get that done tonight.\r\n\r\nUpdate: Syntax highlighting done with Highlight.js (a lot nicer than the Pygments fanboys suggested on IRC)\r\nUpdate 2: Disqus is st00pid\r\nUpdate 3: Have migrated old posts from the old blog. Didn't bother updating the dates.", "date_published": "2012-12-20T02:39:03Z", "tags": [2], "subtitle": "Tadaaaa", "title": "Migration complete!"}}, {"pk": 3, "model": "api.blogpost", "fields": {"body": "Got these errors in the lab today:\r\n\r\n<pre><code class='bash'>$ svn ci -m \"Updating repo\" .\r\n\r\nsvn: E155004: Working copy '/mnt/restore/var/siteupdate/svn/adelson' locked\r\nsvn: E200031: sqlite: attempt to write a readonly database</code></pre>\r\nOver the weekend, a co-worker updated our SVN repo's for a legacy application from 1.6 to 1.7. Through that process, he ran:\r\n\r\n<pre><code class='bash'>ls repo_directory | xargs `svn upgrade`</code></pre>\r\nThe default behaviour of this script changed the permissions on all child files of the repo, so when I came along and tried to check in changes, I got the permissions issues on the .svn files for each repo and the system-wide <pre><code class='bash'>/var/svn/libs/db/rep-cache.db</code></pre> changes required through the SQLite dependency.\r\n\r\nTL;DR\r\n\r\nCheck the user and group permissions on the .db files for the repo  <pre><code class='bash'>.svn/wc.db</pre></code> and server-wide <pre><code class='bash'>/var/svn/libs/db/rep-cache.db</code></pre> and ensure that your user and group has the perms required to write to them.", "date_published": "2012-12-20T04:07:33Z", "tags": [3], "subtitle": "E155004", "title": "SVN E2000031"}}, {"pk": 4, "model": "api.blogpost", "fields": {"body": "Tmux should be the default terminal multiplexer, replacing Screen. It should be viewed as a knock-down-rebuild of the standard, supporting local and remote sessions, fast context switching, key-binding and layout scripting.\r\n\r\nI've found it hard to find a decent guide on scripting your conf file, so this post was born. As usual with Unix-compliant terminal tools, it sees itself primarily as a GNU/BSD/Linux application so when working with the Mac platform you need to make a few tweaks to your core conf file.\r\n\r\nFor the uninitiated, most terminal tools draw their configurations from a dotfile, Tmux's is ~/.tmux.conf.\r\nFor the sysadmins (we're looking for one if you like Macs and LAMP (not MAMP)), the global conf files are in /etc/tmux.conf.\r\n\r\nThe rest of the blog will just walk you through my conf file, noting points for extension where important. My file is the child of an orphaned conf file from the Gentoo lib and the ArchLinux entry, both are valuable references for the advanced user.\r\n\r\nAs a preface to the exposition, here are some key points to keep in mind:\r\n<ul>\r\n<li>The Tmux command key is re-bound to the back-tick ( ` )  and the screen access keys are re-indexed to 1. This one pedestrian directive will have your hands wringing in ecstasy. </li>\r\n<li>I have several environments set up and each is atomic. Whilst my work primarily involves LAMP development, my free time frequently involves Python and Java development. Whilst I won't go through the Python and Java set ups as I'm unhappy with the way they're organized and show far too much fluidity across projects, I will show you how to separate your development environments like Eclipse Workspaces.</li>\r\n<li>My LAMP environment is very specific. I use my first screen as a focus for debugging and environment issues. It contains tailed Apache and PHP logs, a mysql and bash prompt and a small Vim editor for accessing host files and environment variables. If I weren't so opposed to live edits on development and production servers that aren't channeled through source control / continus integration services I'd have window #2 as a dedicated SSH window.</li></ul>\r\nSubsequent screens are used as file-oriented slaves. They primarily contain full-screen Vim editors but given how flexible sessions are in Tmux, they can contain bash prompts or tailed logs where relevant.\r\nColour, the most important attribute for some people, should be seen as uniquely specified within tmux. Instead of the GNU approach where you're supposed to memorize hex/octal combinations like it makes sense, Tmux uses the colorXXX scheme. To see all the available colors, run this as a bash script within tmux itself:\r\n\r\n<pre><code class='bash'>#!/bin/bash\r\nfor i in {0..255} ; do\r\n    printf \"\\x1b[38;5;${i}mcolour${i}\\n\"\r\ndone</code></pre>\r\n\r\nIf you're looking for transparent colour schemes, you'll need to run the script for yourself. Tmux gets sticky (not it's fault!) in OS X 10.8 so you'll probably have to manually kill threads when opening new consoles and not seeing your changes.\r\n\r\nP.S - It's so awesome to see colour spelt correctly! As for what colors I've chosen, well that's my poor taste innit?\r\n\r\n  <pre><code class='bash'>## `prefix\r\n  set-option -g prefix `\r\n\r\n  #### COLOUR\r\n  set -g default-terminal \"screen-256color\"\r\n  # default statusbar colors\r\n  set-option -g status-bg colour235 #base02\r\n  set-option -g status-fg colour136 #yellow\r\n  set-option -g status-attr default 10 \r\n  # default window title colors\r\n  set-window-option -g window-status-fg colour244\r\n  set-window-option -g window-status-bg default\r\n  #set-window-option -g window-status-attr dim 15 \r\n  # active window title colors\r\n  set-window-option -g window-status-current-fg colour166 #orange\r\n  set-window-option -g window-status-current-bg default\r\n  #set-window-option -g window-status-current-attr bright\r\n  \r\n  # pane border\r\n  set-option -g pane-border-fg colour235 #base02\r\n  set-option -g pane-active-border-fg colour240 #base01\r\n  \r\n  # message text\r\n  set-option -g message-bg colour235 #base02\r\n  set-option -g message-fg colour166 #orange\r\n  \r\n  # pane number display\r\n  set-option -g display-panes-active-colour colour33 #blue\r\n  set-option -g display-panes-colour colour166 #orange\r\n  \r\n  # clock\r\n  set-window-option -g clock-mode-colour colour64 #green\r\n  \r\n  # Allows use of hotkeys for resizing panes\r\n  bind-key + resize-pane -D 3\r\n  bind-key / resize-pane -L 3\r\n  bind-key - resize-pane -U 3\r\n  bind-key * resize-pane -R 3\r\n  \r\n  # set-option -g default-terminal \"screen-256color\"\r\n  set-option -g mouse-select-pane on\r\n  set-option -g status-keys vi\r\n  set-option -g bell-action any\r\n  set-option -g set-titles on\r\n  set-option -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)\r\n  set-option -g visual-bell on\r\n  # Visual styles\r\n  \r\n  set-option -g pane-active-border-fg green\r\n  set-option -g pane-active-border-bg black\r\n  set-option -g pane-border-fg white\r\n  set-option -g pane-border-bg black\r\n  \r\n  set-option -g message-fg black\r\n  set-option -g message-bg green\r\n  \r\n  #setw -g mode-bg black\r\n  \r\n  setw -g window-status-bg black\r\n  setw -g window-status-current-fg green\r\n  \r\n  set -g status-left '#[fg=red]#H#[fg=green]:#[fg=white]#S #[fg=green]][#[default]'\r\n \r\n  set -g status-right '#[fg=green]][#[fg=white] #T #[fg=green]][ #[fg=blue]%Y-%m-%d #[fg=white]%H:%M#[default]'\r\n  #set -g status-right '#[fg=green]][ #[fg=blue]%Y-%m-%d #[fg=white]%H:%M#[default]'\r\n  \r\n  # 0 is too far from ;)\r\n  set -g base-index 1</pre></code>", "date_published": "2012-12-20T04:21:20Z", "tags": [4], "subtitle": "Yes, I'm on the band wagon", "title": "Scripting Layouts in Tmux for Mac"}}, {"pk": 9, "model": "api.blogpost", "fields": {"body": "It's been a while (sorry). I've been busy working my butt of on a few different projects. To say sorry, I've written a class that fetches XML from an RPC and returns it as either an Array or an ArrayCollection.\r\n\r\nAll you need to do is:\r\n\r\n0) Edit the formatXML method of the class to your particular data needs. AS3/Flex doesn't support recursive binds of attribute or property names so you have to do this manuall ~____~\r\n\r\n1)  Import it\r\n\r\n<pre><code class='actionscript'>Import PATH.TO.FILE.XMLDataFetcher</code></pre>\r\n\r\n2) Scope / Instantiate it:\r\n\r\n<pre><code class='actionscript'>private var xmlDataFetcher = new XMLDataFetcher(httpService,xmlUrlString,xmlRequestVars);</code></pre>\r\n\r\n** The constructor needs references to the following objects to be passed in:\r\n\r\nHttpSerivce (to conduct the XML RPC)\r\nxmlUrlString (the absolute URL of the server serving the RPC)\r\nxmlRequestVars (any variables you wish to pass to the server)\r\n\r\n3) Listen for the Event.COMPLETE event on the class:\r\n\r\n<pre><code class='actionscript'>xmlDataFetcher.addEventListener(Event.COMPLETE,XMLRequestComplete)</code></pre>\r\n\r\n4) Call either the getXMLasArrayCollection or getXMLasArray depending on your needs\r\n\r\n<pre><code class='actionscript'>var returnedXmlArrayCollection:ArrayCollection = xmlDataFetcher.getXMLAsArrayCollection();\r\nvar returnedXmlArray:Array = xmlDataFetcher.getXMLasArray();</code></pre>\r\nTL;DR\r\n\r\n<pre><code class='actionscript'>package\r\n{\r\n import flash.events.*;\r\n import flash.events.EventDispatcher;\r\n \r\n import mx.collections.ArrayCollection;\r\n import mx.collections.ArrayList;\r\n import mx.collections.IList;\r\n import mx.collections.XMLListCollection;\r\n import mx.controls.Alert;\r\n import mx.rpc.events.FaultEvent;\r\n import mx.rpc.events.ResultEvent;\r\n import mx.rpc.http.mxml.HTTPService;\r\n import mx.rpc.xml.SimpleXMLDecoder;\r\n import mx.utils.ArrayUtil;\r\n \r\n public class XMLDataFetcher extends EventDispatcher\r\n {\r\n  \r\n  private var xmlResult:XML;\r\n  private var xmlArray:Array = new Array();\r\n  private var xmlArrayCollection:ArrayCollection;\r\n  \r\n  // Inherited instance references\r\n  private var _httpService:HTTPService;\r\n  private var _urlString:String;\r\n  private var _requestVars:Object;\r\n  \r\n  public function XMLDataFetcher(httpServiceReference:HTTPService,urlString:String,requestVars:Object)\r\n  {\r\n   _httpService = httpServiceReference;\r\n   _urlString = urlString;\r\n   _requestVars = requestVars;\r\n   loadModel();\r\n  }\r\n  \r\n  public function loadModel():void{\r\n   _httpService.url = _urlString;\r\n   _httpService.request = _requestVars;\r\n   _httpService.addEventListener(ResultEvent.RESULT,httpService_result);\r\n   _httpService.send();\r\n   trace(\"Sending request\");\r\n  }\r\n  \r\n  private function httpService_result(e:ResultEvent):void{\r\n   // Need to add an if statement to guard against\r\n   // an invalid httpService call\r\n   \r\n   xmlResult = (e.result) as XML;\r\n   // Returned XML Object -> trace(xmlResult);\r\n   var xmlList:XMLList = xmlResult.item;\r\n   // Filtered XML object -> trace(xmlList);\r\n   // All children of the XML object -> trace(xmlList.children());\r\n   xmlArray = formatXML(xmlList);   \r\n   xmlArrayCollection = new ArrayCollection(xmlArray);\r\n   dispatchEvent(new ResultEvent(Event.COMPLETE));\r\n  }\r\n  \r\n  public function getXMLAsArrayCollection():ArrayCollection{\r\n   return xmlArrayCollection;\r\n  }\r\n  \r\n  public function getXMLasArray():Array{\r\n   return xmlArray;\r\n  }\r\n  \r\n  private function formatXML(xmlData:XMLList):Array{\r\n   var returnArray:Array = new Array();\r\n   var xmlLength:int = xmlData.length();\r\n   \r\n   for(var i:int =0; i<xmlLength;i++){\r\n    returnArray[i] = new Array;\r\n    returnArray[i][0] = xmlData[i].seller_id;\r\n    returnArray[i][1] = xmlData[i].DT_first_message;\r\n    returnArray[i][2] = xmlData[i].party_required_to_respond;\r\n    returnArray[i][3] = xmlData[i].DT_last_message;\r\n    returnArray[i][4] = xmlData[i].thread_subject;\r\n    returnArray[i][5] = xmlData[i].thread_unread;\r\n    returnArray[i][6] = xmlData[i].id;\r\n    returnArray[i][7] = xmlData[i].buyer_id;\r\n   }\r\n   \r\n   return returnArray;\r\n  }\r\n\r\n  \r\n }\r\n}</code></pre>", "date_published": "2012-12-20T04:55:20Z", "tags": [8], "subtitle": "XML to Array OR ArrayCollection", "title": "FlexAS3"}}, {"pk": 10, "model": "api.blogpost", "fields": {"body": "This post documents setting up a Backbone / Django App on RHEL6 with caching, meta-optimization, custom middleware and butterflies. LOTS OF DEM. \r\n\r\nThe plan is to eventually just let you run a <pre><code class='bash'>yum -y && pip -r</code></pre> on a reqs file to boot it.", "date_published": "2012-12-20T05:00:59Z", "tags": [9, 11, 12], "subtitle": "Super Awsum ", "title": "Django RHEL6 Backbone"}}, {"pk": 7, "model": "api.blogpost", "fields": {"body": "Bin: RabbitMQ Client / Server\r\nEnv: Mac OSX (available to all env)\r\nDesc: RabbitMQ\r\n\r\nI've used RabbitMQ for quite a while without actually knowing what it was. It came as the default\r\nmessage queuer on Celery. All along I thought Celery was the juice but after spending an afternoon debugging a messaging protocol we'd written for AWS, I was surprised to learn that I wasn't taking advantage of a queuer correctly. RabbitMQ is O/S, has primary language bindings in Python and Java (my 2 fav langs for Enterprise), is stable and kicks a whole lot of ass.\r\nInstallation instructions for RabbitMQ\r\n\r\nThis tute is mainly for OSX users but as it's the defacto standard, the same commands and set up should work on all environments.\r\n\r\n1) Install RabbitMQ and Erlang (if you don't already have the best lang for doing multi-thread programming)\r\n\r\n<pre><code class='bash'>sudo port install rabbitmq-server\r\nsudo port install erlang</code></pre>\r\n2) Path\r\n\r\nOne big problem with macports is that the bin installs are frequently all over the place. So I added the following line to my .zshrc (if you don't use zsh or use bash or don't know what I'm talking about add the following lines to ~/.bashrc)\r\n<pre><code class='bash'>PATH=$PATH:/opt/local/lib/rabbitmq/bin\r\nPATH=$PATH:/opt/local/lib/erlang/bin</code></pre>\r\n\r\nand ensure you reload your conf\r\n<pre><code class='bash'>source ~/.zshrc</code></pre>\r\n3) Run\r\n\r\n<pre><code class='bash'>sudo rabbitmq-server -detached</code></pre>\r\n4) Make sure it's running\r\n\r\n<pre><code class='bash'>ps -A | grep -i \"rabbit\"\r\n83724 ??         0:01.68 /opt/local/lib/erlang/erts-5.9.2/bin/beam.smp -W w -K true -A30 -P 1048576 -- -root /opt/local/lib/erlang -progname erl -- -home /Users/jrm -- -noshell -noinput -sname rabbit@Exhibit-E -boot /opt/local/var/lib/rabbitmq/mnesia/rabbit@Exhibit-E-plugins-expand/rabbit -kernel inet_default_connect_options [{nodelay,true}] -sasl errlog_type error -sasl sasl_error_logger false -rabbit error_logger {file,\"/opt/local/var/log/rabbitmq/rabbit@Exhibit-E.log\"} -rabbit sasl_error_logger {file,\"/opt/local/var/log/rabbitmq/rabbit@Exhibit-E-sasl.log\"} -os_mon start_cpu_sup false -os_mon start_disksup false -os_mon start_memsup false -mnesia dir \"/opt/local/var/lib/rabbitmq/mnesia/rabbit@Exhibit-E\" -noshell -noinput</code></pre>\r\nNote the hostname: \r\n\r\nRabbitMQ is a message broker. The principal idea is pretty simple: it accepts and forwards messages. You can think about it as a post office: when you send mail to the post box you're pretty sure that Mr. Postman will eventually deliver the mail to your recipient. Using this metaphor RabbitMQ is a post box, a post office and a postman. The major difference between RabbitMQ and the post office is the fact that it doesn't deal with paper, instead it accepts, stores and forwards binary blobs of data - messages. RabbitMQ, and messaging in general, uses some jargon.\r\n\r\nProducing means nothing more than sending. A program that sends messages is a producer. We'll draw it like that, with \"P\":\r\n\r\n<img height=\"50\" src=\"http://www.rabbitmq.com/img/tutorials/producer.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" />\r\n\r\nA queue is the name for a mailbox. It lives inside RabbitMQ. Although messages flow through RabbitMQ and your applications, they can be stored only inside a queue. A queue is not bound by any limits, it can store as many messages as you like ? it's essentially an infinite buffer. Many producers can send messages that go to one queue, many consumers can try to receive data from one queue. A queue will be drawn as like that, with its name above it:\r\n  \r\n<img height=\"90\" src=\"http://www.rabbitmq.com/img/tutorials/queue.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" />\r\n\r\n\r\nConsuming has a similar meaning to receiving. A consumer is a program that mostly waits to receive messages. On our drawings it's shown with \"C\":\r\n\r\n<img height=\"50\" src=\"http://www.rabbitmq.com/img/tutorials/consumer.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" /><br />\r\n\r\n\r\nNote that the producer, consumer, and broker do not have to reside on the same machine; indeed in most applications they don't.\r\n<img height=\"100\" src=\"http://www.rabbitmq.com/img/tutorials/python-one-overall.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" /><br />\r\n\r\n\r\nProducer sends messages to the \"hello\" queue. The consumer receives messages from that queue.\r\nUses of RabbitMQ as a queuing service\r\n\r\nIf you're new to queueing services, I suggest just setting up a simple to-do list with Celery. Once you're up to speed, here are a few things I use queueing services to perform:\r\n\r\n1) Nightly rotations / BI / parsing for logs. It's a lot friendlier than running a script in nice mode or arbitrarily setting a cron execution\r\n2) Distributing tasks amongst workers for continuous processing of blobs\r\n3) RPC's", "date_published": "2012-12-20T04:26:42Z", "tags": [5], "subtitle": "The best friend you never knew", "title": "RabbitMQ"}}, {"pk": 8, "model": "api.blogpost", "fields": {"body": "The Google Checkout API is a dream to use because its low-level calls means that it's freely customizeable on any web framework. However, as is customary with Google technology, the documentation is sparse as to particular implementation. Here's how to sign and submit a cart request in Python 2.5 (should work on all pre 3 Python versions)\r\n\r\n1) Set up a form for the user to submit to Google in HTML:\r\n<pre><code class='html'>&lt;form method=&quot;POST&quot; action=&quot;https://sandbox.google.com/checkout/api/checkout/v2/checkout/Merchant/{{=merchant_id}}&quot;&gt;\r\n    &lt;input type=&quot;hidden&quot; name=&quot;cart&quot; value=&quot;{{=base_64_request}}&quot;&gt;\r\n    &lt;input type=&quot;hidden&quot; name=&quot;signature&quot; value=&quot;{{=base_64_hmac_encoded_request}}&quot;&gt;\r\n    &lt;input type=&quot;image&quot; name=&quot;Google Checkout&quot; alt=&quot;Fast checkout through Google&quot;\r\n    src=&quot;{{=IMAGE_URL}}&quot;&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;!--  Cart: base64-encoded Checkout API XML request - base_64_request --&gt;\r\n&lt;!--  Signature: base64-encoded HMAC-SHA-1 signature - base_64_hmac_encoded_request --&gt;\r\n&lt;!-- Merchant ID: the merchant ID supplied by Google on sign-up - merchant_id -&gt;\r\n</code></pre>2)  Generate the base-64 encoding of the XML ( base_64_request)\r\n<pre><code class='python'>def base_64_encode(input_string):\r\n    import base64\r\n    return base64.b64encode(input_string)</code></pre>\r\n3) HMAC-SHA-1 THEN Base-64 encode the XML cart (base_64_hmac_encoded_request)\r\n<pre><code class='html'>def hmac_sha1(input_string,key):\r\n    import hashlib\r\n    import hmac\r\n    hashed = hmac.new(key, input_string, hashlib.sha1).digest()\r\n    return hashed\r\n\r\ndef base_64_encode(input_string):\r\n    import base64\r\n    return base64.b64encode(input_string)</code></pre>", "date_published": "2012-12-20T04:38:44Z", "tags": [6, 7], "subtitle": "Python bindings", "title": "Google Checkout API"}}, {"pk": 1, "model": "api.experiment", "fields": {"body": "Test1", "date_published": "2012-12-22T01:19:02Z", "tags": [1], "thumbnail": "thumbs/Buckyball_Nested-1024x781.jpg", "title": "Test1"}}, {"pk": 2, "model": "api.experiment", "fields": {"body": "Test2", "date_published": "2012-12-22T01:19:14Z", "tags": [1], "thumbnail": "thumbs/13982460-candy-corn-seamless-texture-tile.jpg", "title": "Test2"}}, {"pk": 3, "model": "api.experiment", "fields": {"body": "Test3", "date_published": "2012-12-22T01:19:25Z", "tags": [1], "thumbnail": "thumbs/13982460-candy-corn-seamless-texture-tile_1.jpg", "title": "Test3"}}, {"pk": 4, "model": "api.experiment", "fields": {"body": "Test4", "date_published": "2012-12-22T01:20:08Z", "tags": [1], "thumbnail": "thumbs/casablanca_1.png", "title": "Test4"}}, {"pk": 5, "model": "api.experiment", "fields": {"body": "Test5", "date_published": "2012-12-22T01:21:23Z", "tags": [1], "thumbnail": "thumbs/notorious-big-biggie-bw.png", "title": "Test5"}}, {"pk": 6, "model": "api.experiment", "fields": {"body": "Test6", "date_published": "2012-12-22T01:21:49Z", "tags": [1], "thumbnail": "thumbs/notorious-big-t-shirt-hr.jpg", "title": "Test6"}}, {"pk": 7, "model": "api.experiment", "fields": {"body": "Test7", "date_published": "2012-12-22T01:21:59Z", "tags": [1], "thumbnail": "thumbs/13982460-candy-corn-seamless-texture-tile_2.jpg", "title": "Test7"}}, {"pk": 40, "model": "auth.permission", "fields": {"codename": "add_logentry", "name": "Can add log entry", "content_type": 14}}, {"pk": 41, "model": "auth.permission", "fields": {"codename": "change_logentry", "name": "Can change log entry", "content_type": 14}}, {"pk": 42, "model": "auth.permission", "fields": {"codename": "delete_logentry", "name": "Can delete log entry", "content_type": 14}}, {"pk": 28, "model": "auth.permission", "fields": {"codename": "add_blogpost", "name": "Can add blog post", "content_type": 10}}, {"pk": 29, "model": "auth.permission", "fields": {"codename": "change_blogpost", "name": "Can change blog post", "content_type": 10}}, {"pk": 30, "model": "auth.permission", "fields": {"codename": "delete_blogpost", "name": "Can delete blog post", "content_type": 10}}, {"pk": 31, "model": "auth.permission", "fields": {"codename": "add_experiment", "name": "Can add experiment", "content_type": 11}}, {"pk": 32, "model": "auth.permission", "fields": {"codename": "change_experiment", "name": "Can change experiment", "content_type": 11}}, {"pk": 33, "model": "auth.permission", "fields": {"codename": "delete_experiment", "name": "Can delete experiment", "content_type": 11}}, {"pk": 22, "model": "auth.permission", "fields": {"codename": "add_images", "name": "Can add images", "content_type": 8}}, {"pk": 23, "model": "auth.permission", "fields": {"codename": "change_images", "name": "Can change images", "content_type": 8}}, {"pk": 24, "model": "auth.permission", "fields": {"codename": "delete_images", "name": "Can delete images", "content_type": 8}}, {"pk": 34, "model": "auth.permission", "fields": {"codename": "add_product", "name": "Can add product", "content_type": 12}}, {"pk": 35, "model": "auth.permission", "fields": {"codename": "change_product", "name": "Can change product", "content_type": 12}}, {"pk": 36, "model": "auth.permission", "fields": {"codename": "delete_product", "name": "Can delete product", "content_type": 12}}, {"pk": 25, "model": "auth.permission", "fields": {"codename": "add_tag", "name": "Can add tag", "content_type": 9}}, {"pk": 26, "model": "auth.permission", "fields": {"codename": "change_tag", "name": "Can change tag", "content_type": 9}}, {"pk": 27, "model": "auth.permission", "fields": {"codename": "delete_tag", "name": "Can delete tag", "content_type": 9}}, {"pk": 37, "model": "auth.permission", "fields": {"codename": "add_talks", "name": "Can add talks", "content_type": 13}}, {"pk": 38, "model": "auth.permission", "fields": {"codename": "change_talks", "name": "Can change talks", "content_type": 13}}, {"pk": 39, "model": "auth.permission", "fields": {"codename": "delete_talks", "name": "Can delete talks", "content_type": 13}}, {"pk": 19, "model": "auth.permission", "fields": {"codename": "add_sitemetadata", "name": "Can add site meta data", "content_type": 7}}, {"pk": 20, "model": "auth.permission", "fields": {"codename": "change_sitemetadata", "name": "Can change site meta data", "content_type": 7}}, {"pk": 21, "model": "auth.permission", "fields": {"codename": "delete_sitemetadata", "name": "Can delete site meta data", "content_type": 7}}, {"pk": 4, "model": "auth.permission", "fields": {"codename": "add_group", "name": "Can add group", "content_type": 2}}, {"pk": 5, "model": "auth.permission", "fields": {"codename": "change_group", "name": "Can change group", "content_type": 2}}, {"pk": 6, "model": "auth.permission", "fields": {"codename": "delete_group", "name": "Can delete group", "content_type": 2}}, {"pk": 1, "model": "auth.permission", "fields": {"codename": "add_permission", "name": "Can add permission", "content_type": 1}}, {"pk": 2, "model": "auth.permission", "fields": {"codename": "change_permission", "name": "Can change permission", "content_type": 1}}, {"pk": 3, "model": "auth.permission", "fields": {"codename": "delete_permission", "name": "Can delete permission", "content_type": 1}}, {"pk": 7, "model": "auth.permission", "fields": {"codename": "add_user", "name": "Can add user", "content_type": 3}}, {"pk": 8, "model": "auth.permission", "fields": {"codename": "change_user", "name": "Can change user", "content_type": 3}}, {"pk": 9, "model": "auth.permission", "fields": {"codename": "delete_user", "name": "Can delete user", "content_type": 3}}, {"pk": 10, "model": "auth.permission", "fields": {"codename": "add_contenttype", "name": "Can add content type", "content_type": 4}}, {"pk": 11, "model": "auth.permission", "fields": {"codename": "change_contenttype", "name": "Can change content type", "content_type": 4}}, {"pk": 12, "model": "auth.permission", "fields": {"codename": "delete_contenttype", "name": "Can delete content type", "content_type": 4}}, {"pk": 13, "model": "auth.permission", "fields": {"codename": "add_session", "name": "Can add session", "content_type": 5}}, {"pk": 14, "model": "auth.permission", "fields": {"codename": "change_session", "name": "Can change session", "content_type": 5}}, {"pk": 15, "model": "auth.permission", "fields": {"codename": "delete_session", "name": "Can delete session", "content_type": 5}}, {"pk": 16, "model": "auth.permission", "fields": {"codename": "add_site", "name": "Can add site", "content_type": 6}}, {"pk": 17, "model": "auth.permission", "fields": {"codename": "change_site", "name": "Can change site", "content_type": 6}}, {"pk": 18, "model": "auth.permission", "fields": {"codename": "delete_site", "name": "Can delete site", "content_type": 6}}, {"pk": 1, "model": "auth.user", "fields": {"username": "root", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2012-12-19T22:41:35Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$10000$UwKyruClWWxX$2Urusx8ItM43+5e6qeBvKIsmAlC4yd3i8em0KIobvnQ=", "email": "jrm.general@gmail.com", "date_joined": "2012-12-17T07:18:26Z"}}, {"pk": 56, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:22:44Z", "object_repr": "Test7", "object_id": "7", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 55, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:22:30Z", "object_repr": "Test6", "object_id": "6", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 54, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:22:11Z", "object_repr": "Test5", "object_id": "5", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 53, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:20:55Z", "object_repr": "Test4", "object_id": "4", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 52, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:20:06Z", "object_repr": "Test3", "object_id": "3", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 51, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:19:56Z", "object_repr": "Test2", "object_id": "2", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 50, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-22T00:19:45Z", "object_repr": "Test1", "object_id": "1", "change_message": "", "user": 1, "content_type": 11}}, {"pk": 49, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:05:45Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 48, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2012-12-20T04:05:05Z", "object_repr": "Test Blog post", "object_id": "1", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 47, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:04:37Z", "object_repr": "Django RHEL6 Backbone", "object_id": "10", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 46, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:03:58Z", "object_repr": "Django RHEL6 Backbone", "object_id": "10", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 45, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:03:18Z", "object_repr": "Django RHEL6 Backbone", "object_id": "10", "change_message": "Changed subtitle.", "user": 1, "content_type": 10}}, {"pk": 44, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:03:05Z", "object_repr": "Django RHEL6 Backbone", "object_id": "10", "change_message": "Changed subtitle.", "user": 1, "content_type": 10}}, {"pk": 43, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:02:50Z", "object_repr": "Django RHEL6 Backbone", "object_id": "10", "change_message": "Changed title.", "user": 1, "content_type": 10}}, {"pk": 42, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T04:02:20Z", "object_repr": "Django + RHEL6 + Backbone = Super", "object_id": "10", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 41, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T04:02:14Z", "object_repr": "django", "object_id": "12", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 40, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T04:02:00Z", "object_repr": "backbone.js", "object_id": "11", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 39, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T04:01:55Z", "object_repr": "backbone", "object_id": "10", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 38, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T04:01:51Z", "object_repr": "rhel", "object_id": "9", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 37, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:00:07Z", "object_repr": "FlexAS3", "object_id": "9", "change_message": "Changed title.", "user": 1, "content_type": 10}}, {"pk": 36, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T04:00:03Z", "object_repr": "Flex-AS3", "object_id": "9", "change_message": "No fields changed.", "user": 1, "content_type": 10}}, {"pk": 35, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:59:48Z", "object_repr": "Flex-AS3", "object_id": "9", "change_message": "Changed title.", "user": 1, "content_type": 10}}, {"pk": 34, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:58:47Z", "object_repr": "Flex/AS3", "object_id": "9", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 33, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:58:44Z", "object_repr": "as3", "object_id": "8", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 32, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:40:32Z", "object_repr": "Google Checkout API", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 31, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:40:21Z", "object_repr": "Google Checkout API", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 30, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:39:55Z", "object_repr": "Google Checkout API", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 29, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:39:09Z", "object_repr": "Google Checkout API", "object_id": "8", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 28, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:38:59Z", "object_repr": "google", "object_id": "7", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 27, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:38:53Z", "object_repr": "python", "object_id": "6", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 25, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2012-12-20T03:29:58Z", "object_repr": "RabbitMQ", "object_id": "6", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 26, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2012-12-20T03:29:58Z", "object_repr": "RabbitMQ", "object_id": "5", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 24, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:29:50Z", "object_repr": "RabbitMQ", "object_id": "7", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 23, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:27:08Z", "object_repr": "RabbitMQ", "object_id": "5", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 22, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:26:09Z", "object_repr": "Scripting Layouts in Tmux for Mac", "object_id": "4", "change_message": "Changed subtitle.", "user": 1, "content_type": 10}}, {"pk": 21, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:25:41Z", "object_repr": "Scripting Layouts in Tmux for Mac", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 20, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:25:02Z", "object_repr": "Scripting Layouts in Tmux for Mac", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 19, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:23:27Z", "object_repr": "Scripting Layouts in Tmux for Mac", "object_id": "4", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 18, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:23:18Z", "object_repr": "tmux", "object_id": "4", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 17, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:20:51Z", "object_repr": "SVN E2000031", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 16, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T03:17:42Z", "object_repr": "SVN E2000031", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 15, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:10:18Z", "object_repr": "SVN E2000031", "object_id": "3", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 14, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T03:10:15Z", "object_repr": "svn", "object_id": "3", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 13, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:56:37Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 12, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:40:28Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 11, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:38:17Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 10, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:32:47Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 9, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:32:16Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "No fields changed.", "user": 1, "content_type": 10}}, {"pk": 8, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-20T02:31:33Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 10}}, {"pk": 7, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T01:42:16Z", "object_repr": "Migration complete!", "object_id": "2", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 6, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T01:42:02Z", "object_repr": "Meta", "object_id": "2", "change_message": "", "user": 1, "content_type": 9}}, {"pk": 5, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-20T01:25:47Z", "object_repr": "Another Product", "object_id": "2", "change_message": "", "user": 1, "content_type": 12}}, {"pk": 4, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-12-19T23:53:35Z", "object_repr": "Test 1", "object_id": "1", "change_message": "Added images \"x\". Added images \"1\".", "user": 1, "content_type": 12}}, {"pk": 3, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-19T22:58:45Z", "object_repr": "Test 1", "object_id": "1", "change_message": "", "user": 1, "content_type": 12}}, {"pk": 2, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-19T22:42:03Z", "object_repr": "Test Blog post", "object_id": "1", "change_message": "", "user": 1, "content_type": 10}}, {"pk": 1, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-12-19T22:42:02Z", "object_repr": "Test", "object_id": "1", "change_message": "", "user": 1, "content_type": 9}}]

